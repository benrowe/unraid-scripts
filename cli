#!/bin/bash
set -e

# todo, when booting the docker container, do a composer install

COLOR_ERROR='\033[0;31m'
COLOR_INFO='\033[0;32m'
COLOR_DEFAULT='\033[0m' # No Color

# test we have docker installed
if [ ! "$(command -v docker)" ]; then
    echo -e "${COLOR_ERROR}Docker is not installed${COLOR_DEFAULT}"
    exit 1
fi

if [ "$1" == "init" ]; then
    echo "INIT"

    if [ -f ".env" ]; then
        echo -e ".env ${COLOR_ERROR}already exists${COLOR_DEFAULT}"
        exit 1
    fi

    # Generate files
    # .env
    cat > .env <<- EOM
DOCKER_CONTAINER_NAME="unraid-scripts"
DOCKER_IMAGE_NAME="benrowe/unraid-scripts"
USER_DATA_DIR="/mnt/user/"
EOM

    # config.yml
    echo '{}' > config.yml

    mkdir commands
    echo '{"require":{}}' > composer.json
    ./cli start
    exit
fi

# if no .env at this point, fail!

if [ ! -f ".env" ]; then
    echo -e "${COLOR_ERROR}.env file not found, please run ./cli init first${COLOR_DEFAULT}"
    exit 1
fi

export $(cat .env | xargs) > /dev/null
echo $BEN

if [ "$1" == "start" ]; then
    echo "start"
    docker pull ${DOCKER_IMAGE_NAME}:latest
    exit 1
fi

if [ "$1" == "stop" ]; then

    exit 1
fi

if [ "$1" == "remove" ]; then
    #remove the container
    exit 1
fi

if [ "$1" == "restart" ]; then
    ./cli stop
    ./cli start
    exit 1
fi

# runs the ./cli.php in the php:7.0-cli container

DOCKER_IMAGE="php:7.0-cli"
PHP_ENTRY="cli.php"

docker run -it --rm --name $DOCKER_CONTAINER_NAME -v "$PWD":/usr/src/myapp -v "$USER_DATA_DIR:/usr/data/" --env-file .env -w /usr/src/myapp "$DOCKER_IMAGE" php $PHP_ENTRY $@
#docker run -it --rm -p 8888:8000 -v "$PWD:/usr/src/myapp" --env-file ./.env test:latest composer install -vvv && php -S 127.0.0.1:8000

#!/bin/bash
set -e

function grab() {
    if [ "$(command -v wget)" ]; then
        wget --quiet $1 -p $2
    else
        curl -s $1 -o $2
    fi
}

# todo, when booting the docker container, do a composer install
# when creating a container, do a pull first

COLOR_ERROR='\033[0;31m'
COLOR_INFO='\033[0;32m'
COLOR_DEFAULT='\033[0m' # No Color

# test we have docker installed
if [ ! "$(command -v docker)" ]; then
    echo -e "${COLOR_ERROR}Docker is not installed${COLOR_DEFAULT}"
    exit 1
fi

if [ "$1" == "init" ]; then
    echo "INIT"

    if [ -f ".env" ]; then
        echo -e ".env ${COLOR_ERROR}already exists${COLOR_DEFAULT}"
        exit 1
    fi

    # Generate files
    # .env
    grab "https://raw.githubusercontent.com/benrowe/unraid-scripts/master/.env.example" ".env"

    # config.yml
    grab "https://raw.githubusercontent.com/benrowe/unraid-scripts/master/config.yml" "config.yml"

    mkdir commands
    grab "https://raw.githubusercontent.com/benrowe/unraid-scripts/master/sample/HelloCommand.php" "commands/HelloCommand.php"
    echo '{"require":{"hashids/hashids":"^3.0"}}' > composer.json
    ./cli start
    exit
fi

# if no .env at this point, fail!

if [ ! -f ".env" ]; then
    echo -e "${COLOR_ERROR}.env file not found, please run ./cli init first${COLOR_DEFAULT}"
    exit 1
fi

export $(egrep -v '^#' .env | xargs)

ARG=$1

if [[ $ARG =~ ^(cli:)?start$ ]]; then
    echo "start"
    if [ $(docker ps -a | grep unraid-scripts | wc -l | tr -d '[:space:]') == "0" ]; then
        # create container, but don't start
        echo "creating"
        docker create \
            -v "${PWD}":/usr/src/myapp/data \
            -v "${USER_DATA_DIR}":/usr/data/ \
            -p 8888:8888 \
            --env-file .env \
            --name unraid-scripts \
            benrowe/unraid-scripts

    fi
    # @todo check for an updated image?
    docker start unraid-scripts
    docker exec unraid-scripts composer update -vv
    exit
fi

if [[ $ARG =~ ^(cli:)?update$ ]]; then
    docker rm --force unraid-scripts
    docker pull $DOCKER_IMAGE_NAME
    exit
fi

if [[ $ARG =~ ^(cli:)?stop$ ]]; then
    docker stop unraid-scripts
    exit
fi

if [[ $ARG =~ ^(cli:)?remove$ ]]; then
    #remove the container

    mkdir -p backup
    mv .env backup
    mv composer.json backup
    mv config.yml backup
    mv commands backup
    docker rm --force unraid-scripts
    exit
fi

if [[ $ARG =~ ^(cli:)?restart$ ]]; then
    ./cli stop
    ./cli start
    exit
fi

# runs the ./cli.php in the php:7.0-cli container

docker exec -it unraid-scripts php $PHP_ENTRY $@